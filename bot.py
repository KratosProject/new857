from requests import Request, Sessionimport requestsimport jsonimport codecsimport requestsfrom bs4 import BeautifulSoup, SoupStrainerimport refrom html import escapefrom tronapi import Tronu = "i49y47"b = "testro6bot"A = "a9795907f31f554934efdf35383973e87e501ef333bf71b87c11cbf2b469c504"from queue import Emptyimport pickleimport loggingfrom telegram.ext import (    Updater,    CommandHandler,     MessageHandler,     ConversationHandler,    Filters,     CallbackQueryHandler,     CallbackContext)from telegram import  (    Update,    InlineKeyboardMarkup,     InlineKeyboardButton,     KeyboardButton,     ReplyKeyboardMarkup, )from keyboard import KBfrom keyboard import KBMfrom keyboard import KBCfrom keyboard import HBMfrom keyboard import yourKBSPanel = f"🔥 *Hello Kratos\n\n💠 Welcome to Admin Panel*"logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',level=logging.INFO)full_node = 'https://api.trongrid.io'solidity_node = 'https://api.trongrid.io'event_server = 'https://api.trongrid.io'PK = Atron = Tron(full_node=full_node,    solidity_node=solidity_node,    event_server=event_server)def checkTrc10(s, base=10, val=None):    try:        return int(s, base)    except ValueError:        return valdef setTronPK(pk):    tron.private_key = pk    tron.default_address = tron.address.from_private_key(pk).base58setTronPK(PK)MDX = 1000# Members DB ---------------------------------------membersList = []with open('MembersDB.data','rb') as membersDatabase:    membersList = pickle.load(membersDatabase)#---------------------------------------------------withdrawl_done = 500#---------------------------------------------------def modify_markdown_string(inputstring):    outputstring = inputstring    char = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']    for char in char:        outputstring = outputstring.replace(char, f'\\{char}')    return outputstringdef refNotify(NAME, CID, Level, Reward):    return f"🎉 Congratulations, {NAME} "+f"[➶](tg://user?id={CID})"+f" joined your Level {Level} network\.\nReward : {Reward}% of Total Purchase Amount"WALLET, WITHDRAW = 0, 1def cancel(update: Update, _: CallbackContext) -> int:    user = update.message.from_user    update.message.reply_text(        '✅ Operation Cancelled'    )    return ConversationHandler.END        def setWalletButtonResponder(update: Update, _:CallbackContext) -> int:    update.callback_query.delete_message()    _.bot.send_message(chat_id=update.callback_query.from_user.id, text="*✏️ Now Send Your TRX Wallet Address To Use It For Future Withdrawals*\n\n_⚠️ This Wallet Will Be Used For Future Withdrawals :_",    parse_mode='MarkdownV2',    reply_markup=ReplyKeyboardMarkup(keyboard=KBC, resize_keyboard=True))      	    return WALLETdef wallet(update: Update, _:CallbackContext) -> int:    global membersList    for member in membersList:        if member['TgID'] == update.message.chat.id:            member['PaytmWallet'] = update.message.text            Address = update.message.text                        with open('MembersDB.data', 'wb') as membersDatabase:                pickle.dump(membersList, membersDatabase)            _.bot.send_message(chat_id=update.message.chat.id, text=f"*🗂 Wallet Address Set To:*\n`{Address}`",            parse_mode='MarkdownV2',    reply_markup=ReplyKeyboardMarkup(keyboard=KBM, resize_keyboard=True))            break    return ConversationHandler.ENDdef withdrawButtonResponder(update: Update, _:CallbackContext) -> int:            	        	_.bot.send_message(chat_id=update.message.chat.id, text="📥  *Input Withdrawal Amount :*",    	  parse_mode='MarkdownV2',    reply_markup=ReplyKeyboardMarkup(keyboard=KBC, resize_keyboard=True))                    	  def withdraw(update: Update, _:CallbackContext) -> int:    amount = update.message.text    check = True            		    if len(amount.split('.',1)) <= 2:        for each in amount.split('.',1):            if not each.isnumeric():                check = False                break    if check:        for member in membersList:            if member['TgID'] == update.message.chat.id:                if not member['PaytmWallet']:                    update.message.reply_text("❌ *Oh\! Look Like You don't Set Your Wallet :*\n\n🥇_Try to Withdraw After Set the Wallet_",                     parse_mode='MarkdownV2',    reply_markup=ReplyKeyboardMarkup(keyboard=KBM, resize_keyboard=True))                                elif float(amount) == 0:                    update.message.reply_text("Are you drunk? You can't withdraw Nil amount")                elif float(amount) <= member['Balance']:                    member['Balance'] -= float(amount)                    with open('MembersDB.data', 'wb') as membersDatabase:                        pickle.dump(membersList, membersDatabase)                                                b = f"{update.effective_user.username}"                        u = "Nobi_420bot"                        A = f"📎 Address : {member['PaytmWallet'][0:]}\n\n🖇 Withdraw Amount : {amount} SafeMoon\n\n🎟 Status : ❌ Pending\n\n\t\t❗️Your Request Forwarded to Admin"                        M = f"/send {member['PaytmWallet'][0:]} {(amount)} SafeMoon"            update.message.reply_text("🔋 Withdrawal Request Successfully :\n\n"+A)                        _.bot.send_message(chat_id='@IN_AIRDROP', text=f"🔋 *New Withdrawl Requested:\n\nUser : {modify_markdown_string(member['FirstName'])}\n\n Link : [{member['TgID']}](tg://user?id={member['TgID']})\n\nAmount : {modify_markdown_string(amount)}\n\nPaytm Number : {member['PaytmWallet'][1:]}*", parse_mode='Markdown')                                        update.message.reply_text("You Don't have enough money")                            update.message.reply_text(text="*✅ Operation Cancelled due to Invalid amount*",        parse_mode='MarkdownV2',       reply_markup=ReplyKeyboardMarkup(keyboard=KBM, resize_keyboard=True))         return ConversationHandler.ENDdef main_menu(update: Update, _:CallbackContext) -> None:    global membersList    userData = None    for member in membersList:        if member['TgID'] == update.message.chat.id:            userData = member    if update.message.text == '💰 Balance':        reply = f"🙌🏻 *User \= [➶](tg://user?id={userData['TgID']}) {modify_markdown_string(userData['FirstName'])}\n\n💰 Balance \= {modify_markdown_string(str(userData['Balance']))}\n\n🪢 Invite To Earn More*"        update.message.reply_text(reply, parse_mode='MarkdownV2')                    elif update.message.text == '📊 Statistics':                update.message.reply_text(text=f"*📊 Bot Live Stats 📊\n\n📤 Total Payouts : {round(withdrawl_done)}\n\n💡 Total Users: {len(membersList)} Users\n\n🔎 Coded By: @NobitaNobi420*",        parse_mode='MarkdownV2')    elif update.message.text == '🙌🏻 Invite':        reply = f"🧑🏻‍✈️ *Your Total Invites : {len(userData['Childs'])} Users\n\n✅ Your Referal link : https://t\.me/testro6bot?start\={userData['TgID']}*"        update.message.reply_text(reply, parse_mode='MarkdownV2')            elif update.message.text == '⛔ Cancel':        	update.message.reply_text(text="🔝 Main Menu", reply_markup=ReplyKeyboardMarkup(keyboard=KBM, resize_keyboard=True))            elif update.message.text == '✅ Panel':    	    	reply=Panel,    	    	update.message.reply_text(reply, parse_mode='MarkdownV2',reply_markup=InlineKeyboardMarkup(HBM))     elif update.message.text == '🗂 Wallet':     update.message.reply_text(text=f"💡 *Your Currently Set EWOKS Wallet Is:*\n`{userData['PaytmWallet']}`\n\n🗂 *It Will Be Used For Future Withdrawals*",     parse_mode='MarkdownV2',reply_markup=InlineKeyboardMarkup(yourKBS))           elif update.message.text == '🎁 Bonus':            reply=f"* 📬 Bonus are Currently Disable :*",                                  update.message.reply_text(reply, parse_mode='MarkdownV2')        elif update.message.text == '🔰 Check Refers':        if userData['Childs']:            reply = f"Referral List \n"            for child in userData['Childs']:                reply += f"\n🧑🏻‍✈️ {userData['Childs'].index(child) + 1} [User](tg://user?id={child})"            update.message.reply_text(reply, parse_mode='MarkdownV2')        else:            update.message.reply_text(text="❌ You didn't referred any friend")    else:        passdef checkMembership(update: Update, _:CallbackContext) -> None:    global membersList    update.callback_query.answer()    user = _.bot.get_chat_member(chat_id='@IN_AIRDROP', user_id=update.callback_query.message.chat.id)    referralBonus = 100000    if user.status == 'member':        #----------Check If the Sender is present in DB or Not?----------#                            for member in membersList:            if member['TgID'] == update.callback_query.message.chat.id:                if not member['isParentRewarded']:                    for parent in membersList:                        if parent['TgID'] == member['ParentTgID']:                            parent['Balance'] += referralBonus                            _.bot.send_message(chat_id=parent['TgID'], text="New User Joined With Your Link", parse_mode='MarkdownV2')                            member['isParentRewarded'] = True                            with open('MembersDB.data', 'wb') as membersDB:                                pickle.dump(membersList, membersDB)                            break                break        update.callback_query.message.reply_text(text='*🏡 Welcome To Main Menu*',        parse_mode='MarkdownV2', reply_markup=ReplyKeyboardMarkup(keyboard=KB, resize_keyboard=True))        #----------------------------------------------------------------#    else:        update.callback_query.message.reply_text('❌ You must join our channel')def start(update: Update, _: CallbackContext) -> None:    global membersList        update.message.reply_text(        text="🎉 Join our Official Payment Channel to Start This Bot\n\n➡️ @IN_AIRDROP\n\nAfter Join Channel Click Bellow Button",         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='✅ Check', callback_data='checkMembership')]])    )        MSG = update.message.text    CID = update.effective_chat.id    NAME = update.effective_chat.first_name        userData = None    #----------Check If the Sender is present in DB or Not?----------#                        for member in membersList:        if member['TgID'] == CID:            userData = member            break    #----------------------------------------------------------------#    #----------If sender is a new to bot then Update MembersDB----------#    if not userData: #----------- New User Joined -----------------------        newMemberTemplate = {            'TgID': CID,            'FirstName': NAME,            'ParentTgID': None,            'isParentRewarded' : False,            'Balance': 0.0,            'PaytmWallet': None,            'Childs':[], #'TgID1', 'TgID2', 'TgID3', ...        }        if len(MSG) >= 8 and MSG[7:].isnumeric():            for L1Invitee in membersList:                if L1Invitee['TgID'] == int(MSG[7:]):                    L1Invitee['Childs'] += [CID]                    newMemberTemplate['ParentTgID'] = L1Invitee['TgID']                    break        membersList += [newMemberTemplate]        with open('MembersDB.data','wb') as membersDatabase:            pickle.dump(membersList, membersDatabase)                # Notify Admin --------------------------------------------------------------------------------------------------------        _.bot.send_message(chat_id=1349422014, text=f"[{CID}](tg://user?id={CID})"+" New Bot User", parse_mode='MarkdownV2')        #----------------------------------------------------------------------------------------------------------------------    def main() -> None:    updater = Updater(token="1946942384:AAEcTxJUczwDIaRp0hO_CsCpB73SaRaPZ1E", use_context=True)    dp = updater.dispatcher    conv_handler = ConversationHandler(        entry_points=[CallbackQueryHandler(setWalletButtonResponder, pattern='set.')],        states={WALLET: [MessageHandler(Filters.regex("^[T][a-zA-Z0-9]{33}"), wallet)]},        fallbacks=[CommandHandler('cancel', cancel)],    )    withdraw_conv_handler = ConversationHandler(        entry_points=[MessageHandler(Filters.regex('^(💳 Withdraw)$'), withdrawButtonResponder)],        states={WITHDRAW: [MessageHandler(Filters.text, withdraw)]},        fallbacks=[CommandHandler('cancel', cancel)],    )    dp.add_handler(CommandHandler('start', start, Filters.chat_type.private))    dp.add_handler(conv_handler)    dp.add_handler(withdraw_conv_handler)    dp.add_handler(CallbackQueryHandler(checkMembership, pattern='^check'))    dp.add_handler(MessageHandler(filters=Filters.chat_type.private & Filters.text & ~Filters.command, callback=main_menu))        updater.start_polling()    updater.idle()if __name__ == "__main__":    main()